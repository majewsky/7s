// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/audience.css
// static/audience.js
// static/presenter.css
// static/presenter.js
// static/slides.css
// static/slides.js

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataStaticAudiencecss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7e\x8a\x85\xdc\x42\x4c\x6c\x0a\x3d" +
	"\xc8\xf4\x61\x64\x69\x2d\x2d\xd1\x1f\xab\x4d\x1d\xb7\xf4\xdd\x8b\xec\x5e\xda\x42\x8e\x33\x87\xf9\xbe\xf1\x12\xc3" +
	"\x05\xe6\x6c\x37\xf8\xec\x00\xa2\x66\x47\x49\xc1\x30\x75\x00\x45\x5b\x4b\xc9\xfd\xa4\x25\x27\xe9\x2b\x7d\xa0\x82" +
	"\xf1\xb5\x3c\x26\xb8\x9e\xe1\x0d\x46\xc6\x08\xe7\x6b\xf7\xd5\x75\xe5\x94\x72\x35\x4c\x45\x2e\x40\x0b\xeb\x88\x27" +
	"\x73\x67\xde\x77\x2d\xd5\x12\xf4\xa6\x60\x0e\xd9\xdc\xda\xdc\x4a\x56\xbc\x82\x71\x18\xde\xd7\x96\x3d\x92\xf3\x72" +
	"\x14\x7e\x7a\xae\x32\x67\xb6\xc8\x7b\xf8\xc5\xdd\x51\xb3\x36\x37\xc7\xf9\x9e\x6c\xa3\xe9\x83\x16\x28\x61\xff\x0f" +
	"\xb1\x5f\x5a\x74\xa4\xb0\x29\xa8\x3a\xd5\xbe\x22\xd3\xf2\xe7\xed\xcb\x21\x28\xf8\x90\x5e\x07\x72\x49\x81\xc1\x24" +
	"\xc8\xad\x35\x39\x64\x56\xb0\x7a\x12\x6c\x36\xdf\x01\x00\x00\xff\xff\xb9\xd1\x98\x12\x50\x01\x00\x00")

func bindataStaticAudiencecssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStaticAudiencecss,
		"static/audience.css",
	)
}



func bindataStaticAudiencecss() (*asset, error) {
	bytes, err := bindataStaticAudiencecssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/audience.css",
		size: 336,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527705532, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStaticAudiencejs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfb\x29\xce\x8c\xb4\x25\x5a\x49\xa7" +
	"\xbd\x96\x80\xc4\x98\x46\xd1\x18\x12\x1b\x12\x12\x42\xc8\x8b\x6f\x5b\x4b\xa9\x9d\xda\x37\xfd\x23\xd4\xef\x8e\x1c" +
	"\x27\x6d\x04\xa5\x82\x97\xcd\x49\x7d\xcf\xfd\x9d\x73\xed\x24\xd3\xda\x14\xac\xad\x49\x52\xfc\x1c\x0c\x80\xd1\xc8" +
	"\xd1\xc2\xae\x08\xc6\xfa\xc2\xe9\x8a\xa1\x8d\xd2\x85\x64\xeb\x06\xc0\x4a\x3a\x18\xff\x60\x15\x21\x87\xb2\x45\xbd" +
	"\x20\xc3\xd9\x8c\xf8\xb6\xa4\xb0\x7c\xbb\x9d\xa8\x44\x74\xa5\x22\x1d\x0f\x00\x3d\x45\x12\x6b\x42\x0b\x00\xad\x42" +
	"\x56\x49\x47\x86\x9b\x65\xec\x79\x33\xd7\xa5\xea\xf6\x86\xd2\x5d\x24\x92\x4a\xe1\x95\x9e\x3a\xb9\xa0\xd7\xe0\xb9" +
	"\x64\x28\xed\xab\x52\x6e\x3d\x78\x4e\x28\x6a\x17\x84\xe0\x4b\xad\xa8\x85\x8c\xbb\xfb\x90\x85\x23\xc9\xd4\x72\x26" +
	"\x22\x6e\xe8\x08\xc3\x3a\xd3\x0a\x39\x44\x50\x13\xe1\xed\xbe\x72\x59\x93\xdb\x3e\x52\x49\x05\x5b\x97\x88\x67\xab" +
	"\xb6\x22\xcd\x64\x55\x91\x51\x11\x39\x0a\xa4\xe3\x41\xdb\xdd\x13\xdf\x44\xa8\xc7\xc0\x34\x31\x5f\x26\xc8\xb1\x8f" +
	"\x5a\xab\x4d\x17\xc5\xdf\x9a\x44\xc5\x17\x0d\x4c\x9a\x15\xd6\x30\x19\x7e\xd7\x6d\x2e\x6d\x21\x83\x52\x36\x77\x34" +
	"\x45\x8e\x8b\x51\xe3\xdd\x8f\x2e\x70\x89\x20\x8f\x4b\x5c\x35\xd6\x80\xb5\x36\xca\xae\xb3\xa2\xc7\x83\x1c\x5a\x6d" +
	"\x9a\x80\xc3\x9f\x23\xb4\xc9\x91\xaa\x68\x6f\x34\x2a\xad\x99\xbd\xac\x6c\x59\xa2\xb4\xb6\x8a\xf3\x90\x6a\x25\x4d" +
	"\x41\x61\x1e\xce\xd6\xb3\x79\x33\x97\xc8\x04\xe9\xbb\x23\x44\x0a\xcf\xdb\xf8\x13\xb9\x15\x75\x07\x2a\x68\x05\x8e" +
	"\x46\xb3\x17\x53\x97\x51\xd8\xe3\x68\x89\x1c\x86\xd6\xf8\xfa\xf1\xfe\x3d\x73\xf5\x99\x96\x35\x79\x4e\x5a\x97\x8e" +
	"\x96\x99\x54\xea\x76\x45\x86\xef\xb5\x67\x32\xe4\x12\x41\xce\x59\x27\x86\x7f\x4a\x02\x85\x35\xde\x96\x94\x95\x76" +
	"\x96\x88\xbb\xdb\x27\x8c\x8c\x65\x3d\xdd\x62\x2a\x75\x49\x6a\x08\x47\x9e\xa5\x63\x6d\x66\xd0\x06\xd7\xf0\x54\x58" +
	"\xa3\x7c\x96\x65\xa2\xed\xd9\x24\xf7\xa4\x17\x64\x6b\x4e\x02\xfc\x10\xd7\x57\x57\x5d\xee\xbb\x93\x64\xf2\xd9\x3a" +
	"\xfe\x4f\xb2\xa6\x86\xd4\x19\xee\xf4\x2a\x60\xd5\xd5\x1e\xe5\x74\xb3\xd2\x4a\xd5\xef\x45\x87\x66\xe1\x72\x52\xc6" +
	"\xd2\xcd\x88\x33\xcf\x92\x6b\x8f\xb3\x3c\x0f\x46\x0e\x9b\x4e\x30\x39\xe2\xda\x19\x52\x68\xa2\x46\x54\xf8\xb7\xf0" +
	"\x4e\xc7\x17\xdd\x04\xf1\xee\x79\xd7\xfe\x6f\xbe\x41\xb4\x9e\xa8\x0d\x72\x7c\x78\xfc\xf4\x10\x3e\x24\x9e\x0e\x36" +
	"\x1c\xf9\xca\x1a\x4f\x4f\xb4\xe1\xf4\x9b\x68\xcf\xf0\x8f\xe6\x38\x8a\xef\xe3\x9e\xf3\x56\x26\x18\xae\x8d\xa2\xa9" +
	"\x0e\x4e\xce\xcf\xd1\x7b\x7f\xec\x22\xf4\x82\x39\x76\x77\x62\x75\xfa\x3b\x77\xb0\x98\xf4\xe6\xb5\x1f\x98\xad\xc8" +
	"\x34\xa9\x8a\x21\x44\x1b\xec\x9b\xb6\x61\x2e\x70\x79\x94\xe1\x30\x6f\x4f\x46\x45\xdd\x5d\x77\x8b\xc2\xe3\x60\x97" +
	"\xa4\xe9\x78\xf0\x2b\x00\x00\xff\xff\xa1\x7b\x53\x08\xe1\x05\x00\x00")

func bindataStaticAudiencejsBytes() ([]byte, error) {
	return bindataRead(
		_bindataStaticAudiencejs,
		"static/audience.js",
	)
}



func bindataStaticAudiencejs() (*asset, error) {
	bytes, err := bindataStaticAudiencejsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/audience.js",
		size: 1505,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527705532, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStaticPresentercss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcf\x6e\xe2\x30\x10\xc6\xef\x7e\x8a\x91\xb8\xec\xb2\xcb\x42\x22" +
	"\xc1\xc1\x68\x4f\xc0\x83\xf8\x5f\x12\x0b\xc7\x63\x39\x93\x00\xad\x78\xf7\x2a\x26\xa5\x09\xa8\x55\x7b\x1c\xfb\xfb" +
	"\xcd\xcc\xf7\x4d\x45\xb5\x83\x57\x06\x50\x8b\x58\x5a\xcf\x61\xb5\x65\x00\x41\x68\x6d\x7d\x39\x54\x05\x7a\x5a\x34" +
	"\xf6\xc5\x70\xc8\x36\xe1\xbc\x85\xe5\x1c\xfe\x43\x16\x4d\x0d\xf3\x25\xbb\x32\x89\xfa\xf2\x75\x8f\x2b\x63\xb6\x88" +
	"\xa2\x36\xcf\x32\x89\x51\x9b\xc8\x21\x0b\x67\x68\xd0\x59\x0d\xd2\x09\x75\x7c\xde\x22\x60\x63\xc9\xa2\xe7\x20\x64" +
	"\x83\xae\x25\xd3\xbf\x12\x06\x9e\x56\x19\x0d\x99\x85\x68\xba\x34\xc9\x99\x82\x38\x64\xdd\xa9\x97\x9e\xac\xa6\x8a" +
	"\x43\xbe\xba\x95\x95\xb1\x65\x45\xa9\xae\x7a\x78\x60\x55\x1b\xe3\x88\xcd\xf3\x09\xbc\xde\x4c\xe1\xf5\x66\x02\x7b" +
	"\x73\xa6\x04\xc7\xdb\xf7\xf7\x26\x33\xd9\x12\xa1\x4f\xa0\xb6\x4d\x70\xe2\xc2\x41\x3a\x1c\x52\xf8\xdc\xb7\x12\x4e" +
	"\xfd\xea\x57\x80\x3f\x90\x47\x53\xff\xde\xfe\x20\xdd\x87\xa5\x3e\xc2\x86\xd5\xbf\x75\x0a\x14\x40\x0a\x75\x2c\x23" +
	"\xb6\x5e\x73\x98\x1d\x0e\x87\xfe\xcd\x59\x6f\x16\x77\x0b\x83\x70\xd2\xec\xee\x88\x57\xd8\x99\xf8\x17\x86\xaa\x40" +
	"\xd5\x36\xc9\xe5\xa4\xef\x7e\xbf\xef\x99\x41\x24\x14\xd9\xce\x3c\xab\x76\xbb\xdd\xa8\xf3\x4c\x92\x5f\x3c\x9c\xf9" +
	"\x76\xaa\xeb\x58\xf1\x78\x8f\x77\xc9\x5b\x00\x00\x00\xff\xff\xba\x1b\xe5\x98\xf6\x02\x00\x00")

func bindataStaticPresentercssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStaticPresentercss,
		"static/presenter.css",
	)
}



func bindataStaticPresentercss() (*asset, error) {
	bytes, err := bindataStaticPresentercssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/presenter.css",
		size: 758,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527198287, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStaticPresenterjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6f\xd3\x40\x10\xc5\xef\xf9\x14\x83\x7b\xc8\x46\x69\x5c\x38" +
	"\x47\x16\x07\x40\x22\xa8\x10\x84\x8b\x84\x84\x10\x72\x77\xc7\xed\x0a\x67\xd6\x99\x1d\x27\x46\xc8\xdf\x1d\xad\xff" +
	"\xa5\x07\x47\x8a\xaa\x9e\xf6\x32\xf3\x7e\x33\xef\xcd\xaa\xbc\x22\x2d\xd6\x91\x5a\xc0\xbf\xd9\x0c\xe0\x90\x31\x78" +
	"\x94\x77\x15\x33\x92\xa4\x85\x35\xb8\xa1\xef\x1b\x48\x60\xac\xb4\xa6\x0e\xc5\x00\x00\xc6\xe9\x6a\x87\x24\xf1\xbe" +
	"\x42\xfe\x9b\x62\x81\x5a\x1c\xab\xc8\xe6\x9c\xed\xf0\xaa\x64\x3c\x44\x8b\x58\x3b\x12\x24\x79\x3f\x14\x17\x4e\x67" +
	"\x41\x29\x7e\x64\xcc\x21\x81\xf9\x8d\x0f\x1c\x7f\x33\x87\x25\x04\x79\x58\xc1\x9b\xc5\xfa\x12\x82\xae\x98\x9f\x45" +
	"\x58\xc2\xeb\xcb\x08\x84\xb5\x3c\x93\x10\x76\x68\x11\x47\x4b\xc6\x1d\x63\xfd\xc4\x54\x48\xc0\x9a\x3a\x4c\xd0\xb4" +
	"\x45\x13\x9e\xab\x89\xb6\x4e\x71\x22\xa4\x2d\xa5\xc8\x07\xe4\x33\x41\x85\x0e\xc6\x3d\x24\x40\x78\x84\x1f\x9f\x6f" +
	"\x3f\x8a\x94\xdf\x70\x5f\xa1\x17\xd5\x1b\xc1\xb8\x8f\x33\x63\x3e\x1c\x90\xe4\xd6\x7a\x41\x42\x56\x51\xe1\x32\x13" +
	"\x5d\x9f\x44\x71\x90\x04\xd0\x8e\xbc\x2b\x30\x2e\xdc\x83\xc2\x58\x32\x7e\x40\x89\x19\x7d\xe9\xc8\xe3\x1d\xd6\xd2" +
	"\x0b\x77\x78\xc2\xe3\xc6\xd4\x90\xc0\xa7\x74\xfb\x25\x2e\x33\xf6\x78\xa6\xeb\x67\xd4\xaf\xfc\xbb\xf5\x34\xfa\x35" +
	"\xc8\xd8\x1c\x54\x2f\xf3\x2a\x49\xa0\x22\x83\xb9\x25\x34\xa7\x91\xa6\x8d\xec\x7a\xc6\x69\x9a\xf6\x6d\x86\x74\xc2" +
	"\xde\xae\x44\x52\xd1\xd7\x6d\x7a\x17\x5d\x9f\x2e\x62\x0c\xb9\xcc\xe4\x91\xb2\x1d\xc2\x12\xe6\x6f\x3d\xca\xaa\x1d" +
	"\x2c\x09\x59\xdb\x51\x38\xe8\x78\x24\xd3\xf9\xd9\xc5\x7a\xee\xb8\xee\x2b\x11\x47\x57\xf7\x42\xab\xfe\x93\x38\xd2" +
	"\x85\xd5\x7f\x9e\xe6\x37\xac\x75\x26\xea\xa9\xfb\x18\x7f\x4e\xb3\xbe\x8c\xde\x9f\xf7\x0b\xd1\x97\x27\xfa\xac\x51" +
	"\x8b\xc5\x7a\xf6\x3f\x00\x00\xff\xff\xe7\x05\x73\x11\x61\x04\x00\x00")

func bindataStaticPresenterjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataStaticPresenterjs,
		"static/presenter.js",
	)
}



func bindataStaticPresenterjs() (*asset, error) {
	bytes, err := bindataStaticPresenterjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/presenter.js",
		size: 1121,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527198216, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStaticSlidescss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xc1\xce\x9b\x30\x10\x84\xef\x3c\xc5\x9e\x2b\xfb\x57\x48\xf2\xf7" +
	"\xe0\x48\x7d\x17\x83\x17\xbc\xfd\x8d\x17\x19\x27\x29\xad\x78\xf7\x0a\x93\xd0\x04\x2c\xf5\x88\xb5\xf3\xcd\x78\x3d" +
	"\xd8\xd8\x39\xf8\x53\x00\x34\xec\xa3\x1c\xe8\x37\x2a\x38\xde\xee\x97\x02\xa0\x23\x2f\x2d\x52\x6b\xa3\x82\xf2\x70" +
	"\xb8\xd9\xf9\x90\x6f\x18\x1a\xc7\x77\x39\x2a\xb0\x64\x0c\xfa\x4b\x31\x15\xc5\x8c\x11\x50\xb1\x19\x05\xd8\x52\x80" +
	"\x3d\x0a\xb0\x27\x01\xf6\x2c\xc0\x7e\x0a\xb0\xdf\x05\xf4\xc9\xa7\xd3\xa1\x25\xaf\xe0\x30\xd3\x7a\x6d\x0c\xf9\xf6" +
	"\xf1\x95\x22\x34\xba\x23\x37\x2a\x18\xb4\x1f\xe4\x80\x81\x9a\x64\x30\xa3\x93\x7e\x95\x94\x01\xbb\x17\x86\x8c\xdc" +
	"\x27\xce\x9c\x26\x9b\xe0\xdd\xfe\xe3\x33\x60\xb7\xce\x6f\x57\x70\x7a\xc0\x1d\x79\x5c\x97\x70\x4e\x87\x53\x61\x8f" +
	"\xbb\x8d\x25\xda\x4e\x70\x7a\x1c\x4f\x85\x3d\xed\x24\x59\xc1\x73\xfc\xbc\x1d\x2f\xf3\x0e\xc7\xd5\xa1\xe8\x05\x5c" +
	"\x9d\x00\x76\x02\x1c\xed\xe4\x39\x71\xf9\x22\x86\x1f\x40\x5d\x9b\x64\x86\x86\xde\xe9\x51\x41\xe5\xb8\xfe\xba\xbc" +
	"\x2e\x0d\xf4\x35\xf2\xfa\x1e\x1f\x9e\xe5\xe0\xc8\x60\x92\xdd\xc9\x44\xbb\x34\x25\xd5\x67\x57\x9d\x4a\xd7\x5f\x6d" +
	"\xe0\xab\x37\x33\x5a\x2f\xe8\xd7\x06\x4c\x1b\xea\x52\x98\xf7\xc8\x4f\x58\xcd\x8e\x83\x82\xbb\xa5\x88\x97\xf7\xbb" +
	"\x9e\x1f\x77\x8d\xf8\x2b\x4a\xed\xa8\xf5\x0a\x6a\xf4\x11\xc3\xbf\xe4\xec\xdd\x28\xd9\xa3\xa4\x4e\xb7\x4b\xfe\x4c" +
	"\xbc\x29\x37\xbc\xd4\x7c\x4b\xf8\xb6\x2f\x77\xc5\xc1\x60\xc8\x36\xfd\x3f\xbb\xca\xfa\xae\xef\xc3\xd5\x4f\xac\xa3" +
	"\x6c\x28\x2a\xa8\xd9\x47\x4d\xe9\x1f\xfc\x1b\x00\x00\xff\xff\x4e\x0c\x5e\x43\xca\x03\x00\x00")

func bindataStaticSlidescssBytes() ([]byte, error) {
	return bindataRead(
		_bindataStaticSlidescss,
		"static/slides.css",
	)
}



func bindataStaticSlidescss() (*asset, error) {
	bytes, err := bindataStaticSlidescssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/slides.css",
		size: 970,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527710603, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataStaticSlidesjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x8f\xdb\x36\x14\xbc\xfb\x57\x0c\x74\x08\xe4\x7a\x2d\x3b\x0b" +
	"\xec\x61\xeb\x95\x83\x1c\x8a\xa6\x45\x1a\x14\xc8\xa1\x87\xa2\x07\x5a\x7c\x96\x88\xd0\xa4\x4a\x52\x56\xdd\xc2\xff" +
	"\xbd\xa0\x3e\x2c\xd2\xeb\x5d\x24\x40\xd1\x83\x0f\xe2\xc7\x0c\x39\x33\xef\x99\xe9\xbe\x51\x85\x13\x5a\xa5\x73\xfc" +
	"\x33\x9b\x01\xab\x15\xab\x6b\x79\x82\xad\xa9\x10\x4c\xc2\xba\x93\x14\xaa\xc4\x5e\x1b\x58\x29\x38\x59\xb4\xc2\x55" +
	"\xd0\x4a\x9e\xa0\x15\x41\x1c\x58\x49\xd0\x0a\xae\xa2\x03\x52\x91\x51\x86\xa7\x9d\xe6\xa7\x6d\x87\x56\x68\xe5\x98" +
	"\x50\x76\xda\xf0\x54\x6f\xc1\x14\x87\xab\x98\xeb\x3e\x6e\x2c\x11\x87\x72\x3b\x9f\x01\x47\x66\xa0\x34\x27\xfb\x16" +
	"\x39\xb8\x2e\x9a\x03\x29\x97\xfd\xd9\x90\x39\x7d\x26\x49\x85\xd3\xe6\xbd\x94\x69\xe2\xf9\xb0\xc5\xf7\x4a\xbb\xd4" +
	"\x16\x46\xd4\x6e\x9e\xcc\x37\x33\x40\xec\x91\xf6\x00\x99\x24\x55\xba\x0a\x79\x8e\xb7\x78\xf3\x66\x80\xfd\x7d\xfd" +
	"\x47\xe6\x58\xf9\x89\x1d\x08\x79\x9e\x23\xf9\x35\xf1\x42\x00\x01\xf7\xfd\x57\x71\xd7\xd8\xe2\xbb\x9e\x34\xa0\xbd" +
	"\xbf\x49\x7b\xff\x8c\xf6\xa7\x5f\x7e\xbc\x10\x63\x62\xf3\xd8\x59\x21\x99\xb5\x1f\x85\x75\x19\xe3\x3c\x4d\xbc\x4a" +
	"\x4b\xad\x68\xd9\x29\x3f\x32\x7a\xad\xb9\x86\xd2\x0e\x42\x59\xc7\xa4\xf4\x86\xc0\x90\x15\x7f\x13\x2a\xa6\xb8\x24" +
	"\x73\x87\x96\x50\x30\x35\x7c\xc3\x55\xc2\xa2\x60\x96\x3a\x4f\x75\xe3\xf0\xf3\xe7\x01\xcd\x90\x6b\x8c\xea\xb1\xcf" +
	"\x33\xff\x1b\xec\xe8\x11\x3f\xf4\x80\xc8\x11\x05\x68\xd4\xad\x68\x8c\x21\xe5\x7e\x13\xdc\x5f\x1d\x0f\xeb\xcd\x65" +
	"\xca\x69\xfd\xf9\xc0\xa4\x1c\xe7\x1a\xc5\x69\x2f\x14\xf1\x68\xc9\x47\x66\x4a\x7a\x65\x09\x27\x2b\x0c\xf1\x0f\x24" +
	"\xca\xca\x21\x47\x2b\x14\xd7\x6d\x26\x94\x22\xd3\x0f\x3e\x67\xbc\x2c\x7e\x85\xf2\xd6\x9a\x59\xaf\xae\xcf\xa9\xd5" +
	"\x92\xb2\x42\x12\x33\xe9\xa0\x7b\x30\x2e\x75\x99\x26\xc3\xc1\x50\x8d\x40\x09\x16\xf1\x69\x87\x8d\xbe\xa0\x52\x4f" +
	"\x2d\x1c\x19\xe6\x15\x44\x8e\xf5\x26\xf8\x7c\xf2\xba\x4d\xdf\x8b\xc5\x14\x90\xb1\x4a\x43\x9d\x87\xa9\x0e\xd2\x27" +
	"\xe3\x93\x4f\xda\xeb\xd1\xf5\x99\x15\x87\x72\xca\xd0\x7b\x63\xd8\x29\xab\x8d\x76\xda\x9d\x6a\xca\xf6\xda\xfc\xc0" +
	"\x8a\x2a\x2b\x98\x94\xe9\x84\x7a\x37\xb9\x7e\x19\x9c\x0e\x87\x89\x3f\xf3\xed\x83\xb2\x76\x30\x32\x8a\xc5\x02\xc9" +
	"\xb1\x4d\x46\xe6\xf3\x7c\x10\xda\x5f\xae\xf5\xad\x61\x50\x90\x6b\xb2\x7d\xaf\xa8\x8d\xe6\x4d\x41\xef\x82\x8b\x0e" +
	"\x80\x17\xd7\xe2\xc2\xb1\x85\xd1\xa3\xed\x23\x8f\xaf\xcc\xab\x5d\xf9\x95\x3f\xc1\x45\x76\x86\xd8\x97\x0d\x56\xab" +
	"\x23\x99\x13\x1a\x25\xc5\x17\x92\xa7\xf1\xc8\x2f\x42\x3e\xbd\x8c\x78\x1d\xff\x50\x92\xcd\xb3\x55\x97\x8b\x45\xf8" +
	"\xd3\xba\x80\xba\x07\xdc\xe6\x78\x7c\x08\xf9\xbc\x9c\x07\x6d\x7c\xad\x33\x05\xb6\xf3\x45\xfe\xf8\x70\xac\x7a\x5d" +
	"\x7d\xbb\x38\xb0\x2f\x04\x4b\xca\xd2\xa6\x6b\x19\x7d\x43\x6f\x75\x23\x39\xf4\x91\xcc\x5e\xea\x76\xe8\xef\x30\x9e" +
	"\x3e\xc0\xfe\x8f\xf2\xf2\x5a\x66\x92\xc7\x87\x20\x26\x63\x54\xa6\xaf\xa8\xfa\x76\xba\x51\x1c\xbb\x13\xba\xdd\x49" +
	"\xb4\xb0\xf7\xf2\x32\x30\xba\x77\x06\x49\x4b\xb1\x43\x51\xf7\x79\xd1\xa1\xb8\x61\xdc\x74\xe8\x3c\x0b\x9b\x73\xeb" +
	"\x1b\xf1\x91\xe0\x34\xe8\xaf\x5a\x7a\x57\x3a\x6b\xb8\x30\xd4\xa9\x63\xdf\x05\x91\xba\xce\x40\x1e\x34\xa5\x50\xbc" +
	"\xc8\xff\x65\x8e\xfb\xf5\x2b\xf9\x78\xc2\xfa\x3a\x1d\xcc\xff\xd5\x3b\x74\x4d\x06\xc2\xfa\x9b\xa1\x25\x61\x38\x96" +
	"\x5b\xec\x98\x90\xd0\xcd\xff\xed\xf9\xc3\xfa\x1b\x3c\x67\xa2\x7b\xa1\xe8\xc6\x7d\x8b\xe1\x83\xc4\x91\x89\x5f\xa3" +
	"\xf0\x22\x54\xf8\x59\x78\x56\xab\xd1\xe4\x9d\x76\x15\xd8\x55\xbd\xfb\x77\x0f\x8b\x13\x76\x17\xec\xb5\x1a\x3b\x61" +
	"\xbd\x1b\x4e\xb7\xcc\x70\x0b\x86\x52\x6b\x8e\x23\x93\x0d\xdd\x3e\x4f\x3e\x25\x65\xec\xab\x11\xfe\x1c\x2b\xdc\x3f" +
	"\xcb\x63\xa4\x60\x9a\xf4\x9b\x22\x90\xc4\xdb\x1f\x4e\x0c\x22\x2d\x90\xcc\xb1\xec\x66\xae\xdb\x39\x96\x18\xa1\x82" +
	"\x0a\x8a\xa1\x42\xbd\x3d\x54\x12\xf6\x7d\xad\x0a\xf2\x47\x3b\x92\x29\x89\xdf\xc1\x3a\x5d\x8f\x7f\x80\xaa\xbc\x51" +
	"\x1b\x3d\xc3\xea\x8a\x71\x8b\x75\xf6\xf8\x18\x39\x18\x05\xc6\xe7\xc2\x27\x66\x47\x05\x6b\x6c\xc0\x18\xe6\x27\x4a" +
	"\xcf\x79\x7a\x07\x75\xc7\x8d\x1e\x41\xfd\x53\x60\x78\x81\x68\x25\x35\xe3\xc8\xe3\x25\xfe\x2f\x64\x78\x8a\x75\x99" +
	"\xb7\x60\x25\x13\x0a\x6d\x45\x0a\xfe\xad\x36\x8c\xfa\xbd\xc4\x43\xb4\x61\xd7\x35\xde\x6c\x76\x9e\x7b\xde\xd9\xbf" +
	"\x01\x00\x00\xff\xff\x68\x5c\xcc\xfa\xc1\x0b\x00\x00")

func bindataStaticSlidesjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataStaticSlidesjs,
		"static/slides.js",
	)
}



func bindataStaticSlidesjs() (*asset, error) {
	bytes, err := bindataStaticSlidesjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "static/slides.js",
		size: 3009,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1527710376, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"static/audience.css":  bindataStaticAudiencecss,
	"static/audience.js":   bindataStaticAudiencejs,
	"static/presenter.css": bindataStaticPresentercss,
	"static/presenter.js":  bindataStaticPresenterjs,
	"static/slides.css":    bindataStaticSlidescss,
	"static/slides.js":     bindataStaticSlidesjs,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"static": {Func: nil, Children: map[string]*bintree{
		"audience.css": {Func: bindataStaticAudiencecss, Children: map[string]*bintree{}},
		"audience.js": {Func: bindataStaticAudiencejs, Children: map[string]*bintree{}},
		"presenter.css": {Func: bindataStaticPresentercss, Children: map[string]*bintree{}},
		"presenter.js": {Func: bindataStaticPresenterjs, Children: map[string]*bintree{}},
		"slides.css": {Func: bindataStaticSlidescss, Children: map[string]*bintree{}},
		"slides.js": {Func: bindataStaticSlidesjs, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
